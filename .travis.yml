language: python
sudo: false

services:
  - xvfb

cache:
  directories:
    - $HOME/.cache/pip
    - $HOME/.ccache  # https://github.com/travis-ci/travis-ci/issues/5853

global:
  - NUMPY=1.17
  - BUILD_DOCS=false
  - SUBMIT_CODECOV=false
  - FLAKE_8=false

jobs:
  fast_finish: true
  include:
    - python: 3.8  # This build will run only 'flake8'
      env: FLAKE_8=true
    - python: 3.7
      env: QT="pyqt5"
    - python: 3.7
      env: QT="pyside2"
    - python: 3.8
      env: QT="pyqt5" BUILD_DOCS=true SUBMIT_CODECOV=true
    - python: 3.8
      env: QT="pyside2"
    - os: osx
      language: generic
      env: TRAVIS_PYTHON_VERSION=3.7 QT="pyqt5"
    - os: osx
      language: generic
      env: TRAVIS_PYTHON_VERSION=3.7 QT="pyside2"
    - os: osx
      language: generic
      env: TRAVIS_PYTHON_VERSION=3.8 QT="pyqt5"
    - os: osx
      language: generic
      env: TRAVIS_PYTHON_VERSION=3.8 QT="pyside2"

before_install:
  - if [ $FLAKE_8 == 'true' ]; then
      pip install flake8;
      flake8 .;
      let res=$?;
      echo "The project code was verified with 'flake8'. Exit code ($res).";
      exit $res;
    fi
  - |
    set -e
    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
        arch="Linux"
    elif [ "$TRAVIS_OS_NAME" == "osx" ]; then
        arch="MacOSX"
    else
        echo "Unknown arch $TRAVIS_OS_NAME"
        exit 1
    fi
    wget https://repo.continuum.io/miniconda/Miniconda3-latest-${arch}-x86_64.sh -O miniconda.sh
    chmod +x miniconda.sh
    ./miniconda.sh -b -p ~/mc
    source ~/mc/etc/profile.d/conda.sh
    conda update conda --yes
    export CONDARC=ci/condarc

install:
  - conda create -y -n testenv python=$TRAVIS_PYTHON_VERSION
  - conda activate testenv
  - |
    set -e
    if [ $QT == "pyside2" ]; then
      conda install -y pyside2 -c conda-forge
    elif [ $QT == "pyqt5" ]; then
      conda install -y pyqt
    else
        echo "Unknown Qt package $QT"
        exit 1
    fi
  - pip install -r requirements.txt
  - pip install -r requirements-dev.txt
  - pip install .
  - conda list
  - pip list

script:
  - coverage run -m pytest  # Run the tests and check for test coverage.
  - coverage report -m -i  # Generate test coverage report.
  - |
    set -e
    if [ $BUILD_DOCS == 'true' ]; then
      make -C docs html  # Build the documentation.
    fi

after_success:
  - if [ $SUBMIT_CODECOV == 'true' ]; then codecov; fi;
